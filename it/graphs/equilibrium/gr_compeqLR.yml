params:

- {name: a, value: 5, min: 3, max: 7, round: 1}

- {name: A, value: 80, min: 40, max: 100, round: 10}
- {name: w, value: 64, min: 40, max: 80}
- {name: p, value: 2.5, min: 0.5, max: 5, round: 0.05}
- {name: fc, value: 100, min: 50, max: 200, round: 10}
- {name: numimp, value: 20, min: 10, max: 40, round: 1}
- {name: numcons, value: 1000}

calcs:
  xopt: ( params.A * params.A / ( 2 * params.w ) ) * params.p

  tr: params.p * calcs.xopt
  vc: (calcs.xopt)^(2) / 100
  tc: calcs.vc + (params.fc)
  econprofit: calcs.tr - calcs.vc
  accprofit: calcs.tr - calcs.tc

  mc: calcs.xopt / 50
  avc: (calcs.xopt) / 100
  atc: calcs.xopt / 100 + (params.fc) / calcs.xopt

  mktsupply: (params.numimp)*(calcs.xopt)
  acmin: (2)*(sqrt((params.fc)*(params.w)))/(params.A)
  qeff: (params.A)*(sqrt((params.fc)/(params.w)))

  eqQ: (5) / ( ( 2 * params.w / ( ( params.A * params.A ) * (params.numimp) ) ) + (1)/(params.numcons) ) 

  eqP: (5) - (calcs.eqQ) / (params.numcons)

aspectRatio: 2

layout:
  TwoHorizontalGraphsPlusSidebar:

    leftGraph: 
      xAxis:
        max: 210
        min: -3
        ticks: 0
      yAxis:
        max: 5.5
        ticks: 0
      label: a

      objects:

        - Label:
                coordinates: [210, 0]
                text: "` \\\\text{kg} `"
                yPixelOffset: 0
                xPixelOffset: -5
                position: l
        - Label:
                coordinates: [0, 5.5]
                text: "` \\\\text{euro/kg}  `"
                xPixelOffset: 0

# optimal choice
        - Point:
            coordinates: [calcs.xopt, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.xopt.toFixed(2)
            show: params.p > calcs.acmin

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.xopt.toFixed(2)
            show: params.p < calcs.acmin

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: 0.00
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2)

        - Point:
            coordinates: [calcs.qeff, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.qeff.toFixed(2)
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2)


# price line
        - Line:
            yIntercept: params.p
            color: Green
            label:
              text: P
              x: 210
              position: l
            strokeWidth: 1.5
            bgcolor: none
            drag:
              - vertical: p

# LR supply curve
        - Curve:
            fn: ( 2 * params.w / ( params.A * params.A ) ) * (x)
            color: Red
            label:
              text: S^i_{LR}
              x: 210
              position: l
            strokeWidth: 2.5
            min: calcs.qeff

        - Segment:
            a: [0.5,0]
            b: [0.5,calcs.acmin]
            color: Red
            strokeWidth: 3

        - Point:
            coordinates: [0.5, calcs.acmin]
            color: Red
            r: 2.5
            show: params.p !== calcs.acmin

        - Point:
            coordinates: [calcs.qeff, calcs.acmin]
            color: Red
            r: 2.5
            show: params.p !== calcs.acmin

# marginal cost curve
        - Curve:
            fn: ( 2 * params.w / ( params.A * params.A ) ) * (x)
            color: Red
            label:
              text: MC
              x: 50
              position: bl
            strokeWidth: 0.7
            lineStyle: dashed


# average cost curve
        - Curve:
            fn: ( params.fc / (x) ) + ( params.w / ( params.A * params.A ) ) * (x)
            color: Brown
            label:
              text: AC
              x: 27
            strokeWidth: 0.7
            min: 0.5
            lineStyle: dashed

# Qeff & ACmin
        - Point: {coordinates: [calcs.qeff, calcs.acmin], droplines: {vertical: , horizontal: }, color: Gray, r: 0}

        - Label:
                coordinates: [calcs.qeff, 0]
                text: "` Q^{\\\\text{eff}} = ${calcs.qeff.toFixed(0)} `"
                yPixelOffset: -32
                xPixelOffset: 
                position: c
                color: Blue

        - Label:
                coordinates: [0, calcs.acmin]
                text: "` AC_{\\\\text{min}} = ${calcs.acmin.toFixed(0)} `"
                yPixelOffset: 
                xPixelOffset: -75
                position: c
                color: Blue











    rightGraph: 
      xAxis:
        max: 5000
        min: -50
        ticks: 4
      yAxis:
        max: 5.5
        ticks: 10
      label: a

      objects:

        - Label:
                coordinates: [5000, 0]
                text: "` \\\\text{kg} `"
        - Label:
                coordinates: [0, 5.5]
                text: "` \\\\text{euro/kg}  `"

# LR supply curve
        - Segment:
            a: [0,0]
            b: [0,calcs.acmin]
            color: Red
            strokeWidth: 3
        - Points: {coordinates: [[0,calcs.acmin],[calcs.qeff,calcs.acmin],[(2)*(calcs.qeff),calcs.acmin],[(3)*(calcs.qeff),calcs.acmin],[(4)*(calcs.qeff),calcs.acmin],[(5)*(calcs.qeff),calcs.acmin],[(6)*(calcs.qeff),calcs.acmin],[(7)*(calcs.qeff),calcs.acmin],[(8)*(calcs.qeff),calcs.acmin],[(9)*(calcs.qeff),calcs.acmin],[(10)*(calcs.qeff),calcs.acmin]], color: Red, r: 2}

        - Point: {coordinates: [(11)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 11}
        - Point: {coordinates: [(12)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 12}
        - Point: {coordinates: [(13)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 13}
        - Point: {coordinates: [(14)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 14}
        - Point: {coordinates: [(15)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 15}
        - Point: {coordinates: [(16)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 16}
        - Point: {coordinates: [(17)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 17}
        - Point: {coordinates: [(18)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 18}
        - Point: {coordinates: [(19)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 19}
        - Point: {coordinates: [(20)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 20}
        - Point: {coordinates: [(21)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 21}
        - Point: {coordinates: [(22)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 22}
        - Point: {coordinates: [(23)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 23}
        - Point: {coordinates: [(24)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 24}
        - Point: {coordinates: [(25)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 25}
        - Point: {coordinates: [(26)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 26}
        - Point: {coordinates: [(27)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 27}
        - Point: {coordinates: [(28)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 28}
        - Point: {coordinates: [(29)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 29}
        - Point: {coordinates: [(30)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 30}
        - Point: {coordinates: [(31)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 31}
        - Point: {coordinates: [(32)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 32}
        - Point: {coordinates: [(33)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 33}
        - Point: {coordinates: [(34)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 34}
        - Point: {coordinates: [(35)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 35}
        - Point: {coordinates: [(36)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 36}
        - Point: {coordinates: [(37)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 37}
        - Point: {coordinates: [(38)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 38}
        - Point: {coordinates: [(39)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 39}
        - Point: {coordinates: [(40)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: params.numimp >= 40}

        - Curve:
            fn: ( 2 * params.w / ( ( params.A * params.A ) * (params.numimp) ) ) * (x)
            color: Red
            label:
              text: S
              x: min(5000,(params.numimp)*( params.A * params.A / ( 2 * params.w ) ) * (5.5))
            strokeWidth: 2
            min: (params.numimp)*(calcs.qeff)






# price line
        - Line:
            yIntercept: calcs.eqP
            color: Green
            strokeWidth: 1





        - Point:
            coordinates: [calcs.eqQ, calcs.eqP]
            color: Green
            r: 5


# market demand
        - Curve:
            fn: (5)-(x)/(params.numcons)
            color: Blue
            strokeWidth: 1.5
            label:
              text: D
              x: (params.numcons)*(4.6)
              position: l



















    sidebar:
      controls:
      - title: Equilibrio Concorrenziale di Lungo Periodo
        sliders:
        - param: numimp
          label: \text{num. imp.}
        divs:
        - html: "` Quando $P = ${params.p}$ la scelta ottima della singola impresa, sia nel breve che nel lungo
                  periodo, è produrre ${calcs.xopt.toFixed(0)} unità.  `"
          show: (params.p > 14)
        - html: "` Quando $P = ${params.p}$ la scelta ottima di breve periodo dell'impresa è produrre ${calcs.xopt.toFixed(0)} unità.
                    Nel lungo periodo (se il prezzo rimane $P=${params.p}$) l'impresa è invece indifferente tra rimanere nel mercato
                    (e produrre ${calcs.xopt.toFixed(0)} unità) e uscire dal mercato (produrre zero unità).  `"
          show: (params.p == 14)
        - html: "` Quando $P = ${params.p}$ la scelta ottima di breve periodo dell'impresa è produrre ${calcs.xopt.toFixed(0)} unità.
                    La scelta ottima di lungo periodo (se il prezzo rimane $P=${params.p}$) è invece uscire dal mercato
                    (produrre zero unità).  `"
          show: (params.p < 14)


    explanation:
      divs:
        - html: "`   `"
          show: params.p !== 0
        - html: "`   `"
          show: params.p !== 0
        - html: "`   `"
          show: params.p !== 0
        - html: "`   `"
          show: params.p !== 0
        - html: "` Dato che $ATC_{\\\\text{min}}=14$, quando $P=${params.p}$ ogni impresa presente nel mercato rimane nel
                  mercato (e produce ${calcs.xopt} unità). Le (potenzialmente infinite) imprese non ancora presenti sul mercato
                  hanno un incentivo a entrare e la quantità offerta sul mercato è quindi potenzialmente infinita 
                  (aumemtare $N$ per vedere questo). `"
          show: params.p > 14
        - html: "` Dato che $ATC_{\\\\text{min}}=14$, quando $P=${params.p}$ ogni impresa presente nel mercato è 
                  indifferente tra rimanere nel mercato (e produrre 40 unità) e uscire dal mercato. Le (potenzialmente infinite) 
                  imprese non ancora presenti sul mercato sono indifferenti tra entrare nel mercato (e produrre 40 unità) e 
                  rimanere fuori. La quantità offerta sul mercato è un qualunque multiplo di 40 (aumemtare $N$ per vedere questo). `"
          show: params.p == 14
        - html: "` Dato che $ATC_{\\\\text{min}}=14$, quando $P=${params.p}$ ogni impresa presente sul mercato nel lungo periodo 
                  decide di uscire. Le imprese non ancora presenti sul mercato
                  non hanno un incentivo a entrare. La quantità offerta sul mercato nel lungo periodo è quindi zero. `"
          show: params.p < 14
        - html: "`   `"
          show: params.x == 0
        - html: "`   `"
          show: params.x == 0
        - html: "`   `"
          show: params.x == 0
        - html: "`  `"
          show: params.x == 0
        - html: "`  `"
          show: params.x == 0
        - html: "`  `"
          show: params.x == 0


